/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
 */

@interface NSData : NSObject <CKRecordValue, CUByteCodable, NSCopying, NSMutableCopying, NSSecureCoding>

@property (nonatomic, readonly) NSData *SHA1Data;
@property (nonatomic, readonly) NSString *SHA1HexString;
@property (nonatomic, readonly) NSData *SHA256Data;
@property (readonly) const void*bytes;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned long long length;
@property (readonly) Class superclass;

// Image: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation

+ (BOOL)supportsSecureCoding;

// Image: /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork

- (BOOL)_isSafeResumeDataForBackgroundDownload;
- (id)_requestFromResumeData;

// Image: /System/Library/Frameworks/CloudKit.framework/Versions/A/CloudKit

// NSData (CKBigDataLogging)

- (id)CKHashedDescription;

// NSData (CKPropertiesDescription)

- (id)CKDescriptionPropertiesWithPublic:(BOOL)arg1 private:(BOOL)arg2 shouldExpand:(BOOL)arg3;

// NSData (CKSQLiteBinding)

- (void)ck_bindInStatement:(id)arg1 atIndex:(unsigned long long)arg2;

// NSData (CKUtilsAdditions)

+ (id)CKDataFromBase64URLSafeString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2;

- (id)CKBase64URLSafeString;
- (id)CKHexString;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKSHA256;
- (id)CKUppercaseHexStringWithoutSpaces;

// Image: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList

// NSData (SFLBookmarkAdditions)

+ (id)__sfl_bookmarkDataWithURL:(id)arg1;
+ (id)__sfl_bookmarkDataWithURLString:(id)arg1;

- (BOOL)__sfl_isDirectoryBookmark;
- (BOOL)__sfl_isFileBookmark;
- (BOOL)__sfl_matchBookmark:(id)arg1 allowWeakMatch:(BOOL)arg2;
- (BOOL)__sfl_matchBookmark:(id)arg1 requiredMatchResult:(long long)arg2;
- (id)__sfl_resolveBookmark;
- (id)__sfl_resolveBookmarkWithOptions:(unsigned long long)arg1 relativeToURL:(id)arg2;
- (id)__sfl_resourcePropertiesForKeys:(id)arg1;
- (id)__sfl_resourcePropertyForKey:(id)arg1;
- (id)__sfl_urlWithoutResolving;

// Image: /System/Library/Frameworks/FileProvider.framework/Versions/A/FileProvider

// NSData (FPFSHelpers)

- (BOOL)getFileIDFromXattr:(unsigned long long*)arg1 docID:(unsigned int*)arg2 genCount:(unsigned long long*)arg3;

// NSData (FPFileMetadataSerialization)

+ (id)fp_dataWithFavoriteRank:(id)arg1;
+ (id)fp_dataWithLastUsedDate:(id)arg1;

- (id)fp_favoriteRank;
- (id)fp_lastUsedDate;

// Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation

// NSData (NSData)

+ (id)_alloc;
+ (BOOL)_base64DecodingAlwaysSucceedsForOptions:(unsigned long long)arg1;
+ (id)_newZeroingDataWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
+ (id)_newZeroingDataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(id)arg3;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)data;
+ (id)dataWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2;
+ (id)dataWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(BOOL)arg3;
+ (id)dataWithContentsOfFile:(id)arg1;
+ (id)dataWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfMappedFile:(id)arg1;
+ (id)dataWithContentsOfURL:(id)arg1;
+ (id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
+ (id)dataWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
+ (id)dataWithData:(id)arg1;

- (BOOL)_allowsDirectEncoding;
- (id)_asciiDescription;
- (id)_base64EncodingAsString:(BOOL)arg1 withOptions:(unsigned long long)arg2;
- (BOOL)_canReplaceWithDispatchDataForXPCCoder;
- (unsigned long long)_cfTypeID;
- (BOOL)_copyWillRetain;
- (id)_createDispatchData;
- (BOOL)_decodeBase64EncodedCharacterBuffer:(const char *)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3 buffer:(char *)arg4 bufferLength:(unsigned long long)arg5 state:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned int x6; }*)arg6;
- (id)_initWithBase64EncodedObject:(id)arg1 options:(unsigned long long)arg2;
- (BOOL)_isCompact;
- (BOOL)_isDispatchData;
- (BOOL)_providesConcreteBacking;
- (id)base64EncodedDataWithOptions:(unsigned long long)arg1;
- (id)base64EncodedStringWithOptions:(unsigned long long)arg1;
- (id)base64Encoding;
- (const void*)bytes;
- (Class)classForCoder;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugDescription;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateByteRangesUsingBlock:(id)arg1;
- (void)getBytes:(void*)arg1;
- (void)getBytes:(void*)arg1 length:(unsigned long long)arg2;
- (void)getBytes:(void*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)hash;
- (id)initWithBase64EncodedData:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithBase64EncodedString:(id)arg1 options:(unsigned long long)arg2;
- (id)initWithBase64Encoding:(id)arg1;
- (id)initWithBytes:(const void*)arg1 length:(unsigned long long)arg2;
- (id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(BOOL)arg3 deallocator:(id)arg4;
- (id)initWithBytes:(void*)arg1 length:(unsigned long long)arg2 copy:(BOOL)arg3 freeWhenDone:(BOOL)arg4 bytesAreVM:(BOOL)arg5;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 deallocator:(id)arg3;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
- (id)initWithContentsOfMappedFile:(id)arg1;
- (id)initWithContentsOfMappedFile:(id)arg1 error:(id*)arg2;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 error:(id*)arg4;
- (id)initWithData:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToData:(id)arg1;
- (unsigned long long)length;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfData:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)replacementObjectForCoder:(id)arg1;
- (id)subdataWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToFile:(id)arg1 atomically:(BOOL)arg2 error:(id*)arg3;
- (BOOL)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (BOOL)writeToURL:(id)arg1 atomically:(BOOL)arg2;
- (BOOL)writeToURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;

// NSData (NSDataCompression)

- (id)_dataWithCompressionOperation:(int)arg1 algorithm:(long long)arg2;
- (id)compressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2;
- (id)decompressedDataUsingAlgorithm:(long long)arg1 error:(id*)arg2;

// NSData (NSDataObjCTypeDeserialization)

- (void)deserializeDataAt:(void*)arg1 ofObjCType:(const char *)arg2 atCursor:(unsigned int*)arg3 context:(id)arg4;

// NSData (NSDataPortCoding)

- (id)replacementObjectForPortCoder:(id)arg1;

// NSData (NSDeserialization)

- (unsigned int)deserializeAlignedBytesLengthAtCursor:(unsigned int*)arg1;
- (void)deserializeBytes:(void*)arg1 length:(unsigned int)arg2 atCursor:(unsigned int*)arg3;
- (int)deserializeIntAtCursor:(unsigned int*)arg1;
- (int)deserializeIntAtIndex:(unsigned int)arg1;
- (void)deserializeInts:(int*)arg1 count:(unsigned int)arg2 atCursor:(unsigned int*)arg3;
- (void)deserializeInts:(int*)arg1 count:(unsigned int)arg2 atIndex:(unsigned int)arg3;

// NSData (NSKindOfAdditions)

- (BOOL)isNSData__;

// NSData (NSScriptAppleEventConversion)

+ (id)_scriptingPointWithDescriptor:(id)arg1;
+ (id)_scriptingRectangleWithDescriptor:(id)arg1;

- (id)_scriptingDebugDescription;
- (id)_scriptingPointDescriptor;
- (id)_scriptingRectangleDescriptor;

// NSData (NSURLExtras)

- (id)_replaceCString:(const char *)arg1 withCString:(const char *)arg2;
- (id)_web_guessedMIMEType;
- (id)_web_guessedMIMETypeForExtension:(id)arg1;
- (id)_web_guessedMIMETypeForXML;
- (id)_web_parseRFC822HeaderFields;

// Image: /System/Library/Frameworks/Security.framework/Versions/A/Security

// NSData (CKUtilsAdditions)

+ (id)CKDataWithHexString:(id)arg1;
+ (id)CKDataWithHexString:(id)arg1 stringIsUppercase:(BOOL)arg2;

- (id)CKHexString;
- (id)CKLowercaseHexStringWithoutSpaces;
- (id)CKUppercaseHexStringWithoutSpaces;

// Image: /System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/AuthKit

// NSData (AuthKit)

- (id)ak_compressedData:(int)arg1;
- (id)ak_hexString;

// Image: /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement

// NSData (BTMAdditions)

+ (id)__btm_bookmarkDataWithURL:(id)arg1;
+ (id)__btm_bookmarkDataWithURLString:(id)arg1;

- (id)__btm_displayName;
- (BOOL)__btm_isFileBookmark;
- (BOOL)__btm_matchBookmark:(id)arg1 requiredMatchResult:(long long)arg2;
- (id)__btm_resolveBookmark;
- (id)__btm_resolveBookmarkWithOptions:(unsigned long long)arg1 relativeToURL:(id)arg2 bookmarkDataIsStale:(BOOL*)arg3 error:(id*)arg4;
- (id)__btm_resourcePropertiesForKeys:(id)arg1;
- (id)__btm_resourcePropertyForKey:(id)arg1;

// Image: /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard

// NSData (BaseBoard)

+ (id)bs_dataWithVMAllocatedBytes:(const void*)arg1 length:(unsigned long long)arg2;

- (void*)bs_bytesForMIG;
- (unsigned int)bs_lengthForMIG;

// Image: /System/Library/PrivateFrameworks/CommonUtilities.framework/Versions/A/CommonUtilities

- (id)_CUTCopyGzippedData;
- (id)_CUTDecompressData;
- (id)_CUTOptionallyDecompressData;
- (id)_CUTStringFromBaseData;

// Image: /System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils

// NSData (CUByteCodable)

+ (id)createWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 error:(id*)arg3;

- (const char *)encodedBytesAndReturnLength:(unsigned long long*)arg1 error:(id*)arg2;
- (id)encodedDataAndReturnError:(id*)arg1;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/GeoServices

// NSData (CPlusPlusProtobuf)

+ (id)dataWithCPPData:(const struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_4_1; unsigned long long x_1_4_2; char *x_1_4_3; } x_1_3_1; struct __short { union { unsigned char x_1_5_1; BOOL x_1_5_2; } x_2_4_1; BOOL x_2_4_2[23]; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; }*)arg1 copy:(BOOL)arg2;

- (struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_4_1; unsigned long long x_1_4_2; char *x_1_4_3; } x_1_3_1; struct __short { union { unsigned char x_1_5_1; BOOL x_1_5_2; } x_2_4_1; BOOL x_2_4_2[23]; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })cppData;
- (id)initWithCPPData:(const struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_4_1; unsigned long long x_1_4_2; char *x_1_4_3; } x_1_3_1; struct __short { union { unsigned char x_1_5_1; BOOL x_1_5_2; } x_2_4_1; BOOL x_2_4_2[23]; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; }*)arg1 copy:(BOOL)arg2;

// NSData (GEOExtras)

- (id)_GEOCreateDispatchData;

// NSData (GEOHashUtilities)

+ (id)_geo_dataForHexString:(id)arg1;

- (id)_geo_MD5Hash;
- (id)_geo_SHA1Hash;
- (id)_geo_SHA256Hash;
- (id)_geo_hexString;

// NSData (GEOMapService)

- (id)_geo_compressedDataViaAlgo:(int)arg1;
- (id)_geo_decompressedDataViaAlgo:(int)arg1;

// NSData (GEOXPCUtil)

+ (id)_geo_withXPCData:(id)arg1;

- (id)_geo_newXPCData;

// Image: /System/Library/PrivateFrameworks/HelpData.framework/Versions/A/HelpData

// NSData (HPDAdditions)

+ (id)hpd_dataFromHexString:(id)arg1;

- (id)hpd_compressedDataUsingAlgorithm:(int)arg1;
- (id)hpd_dataUsingCompressionAlgorithm:(int)arg1 operation:(int)arg2;
- (id)hpd_decompressedDataUsingAlgorithm:(int)arg1;
- (id)hpd_hexString;

// Image: /System/Library/PrivateFrameworks/IDSFoundation.framework/Versions/A/IDSFoundation

- (id)subdataWithRangeNoCopy:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)truncatedDescription;

// Image: /System/Library/PrivateFrameworks/IMFoundation.framework/Versions/A/IMFoundation

+ (id)__imDataWithHexString:(id)arg1;
+ (id)__imDataWithRandomBytes:(unsigned long long)arg1;

- (id)SHA1Data;
- (id)SHA1HexString;
- (id)SHA256Data;
- (id)_FTDecompressData;
- (id)_FTOptionallyDecompressData;
- (id)__imHexString;
- (id)__imHexStringOfBytes:(char *)arg1 withLength:(unsigned long long)arg2;

// Image: /System/Library/PrivateFrameworks/IconFoundation.framework/Versions/A/IconFoundation

// NSData (ISImage)

- (struct CGImageBlockSet { }*)__IS_copyCGImageBlockSetWithProvider:(struct CGImageProvider { }*)arg1;
- (void)__IS_getImageBuffer:(void**)arg1 size:(unsigned long long*)arg2;
- (struct { unsigned int x1; float x2; float x3; unsigned int x4; unsigned int x5; float x6; float x7; }*)__IS_imageHeader;

// Image: /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices

// NSData (ISCompositorResourceValidationToken)

+ (id)_is_invalidToken;
+ (id)_is_staleToken;
+ (id)_is_validToken;

- (unsigned long long)_is_SequenceNumber;
- (id)_is_databaseUUID;
- (void)_is_getSequenceNumber:(unsigned long long*)arg1 andUUID:(id*)arg2;
- (id)_is_persistentIdentifierDigest;

// NSData (ISMutableStoreIndex)

+ (id)_ISMutableStoreIndex_mappedDataWithURL:(id)arg1;

- (BOOL)_ISMutableStoreIndex_makeBackedByFileAtURL:(id)arg1;

// NSData (ISMutableStoreIndex_BlobTable)

+ (id)_ISMutableStoreIndex_mappedDataWithSize:(unsigned long long)arg1;

- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISMutableStoreIndex_addBlobBuffer:(const void*)arg1 size:(unsigned long long)arg2;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISMutableStoreIndex_addBlobData:(id)arg1;
- (unsigned long long)_ISMutableStoreIndex_availableSpace;
- (void)_ISMutableStoreIndex_removeBlobForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;

// NSData (ISMutableStoreIndex_HashTable)

+ (id)_ISMutableStoreIndex_mappedDataWithCapacity:(unsigned long long)arg1 additionalSize:(unsigned long long)arg2;

- (BOOL)_ISMutableStoreIndex_addValue:(struct { unsigned char x1[16]; struct { double x_2_1_1; double x_2_1_2; } x2; double x3; unsigned int x4; unsigned char x5[16]; unsigned char x6[16]; struct { unsigned char x_7_1_1[16]; unsigned long long x_7_1_2; unsigned char x_7_1_3[16]; } x7; }*)arg1;
- (BOOL)_ISMutableStoreIndex_addValue:(const void*)arg1 size:(unsigned long long)arg2 forUUID:(unsigned char)arg3;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISStoreIndex_addNodeWithSize:(unsigned long long)arg1;

// NSData (ISMutableStoreIndex_HashTable_Internal)

- (BOOL)_ISStoreIndex_setNodeRef:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1 forKey:(unsigned long long)arg2;

// NSData (ISStoreIndex)

+ (id)_ISStoreIndex_mappedDataWithURL:(id)arg1;

// NSData (ISStoreIndex_BlobTable)

- (id)_ISStoreIndex_blobDataForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; bool x2; unsigned char x3[0]; }*)_ISStoreIndex_blobForID:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (struct { unsigned int x1; bool x2; unsigned int x3; }*)_ISStoreIndex_blobTableHeader;
- (void)_ISStoreIndex_enumerateBlobsWithBock:(id)arg1;
- (BOOL)_ISStoreIndex_isValid;

// NSData (ISStoreIndex_HashTable)

- (BOOL)_ISStoreIndex_enumerateValuesForUUID:(unsigned char)arg1 bock:(id)arg2;
- (void)_ISStoreIndex_enumerateValuesWithBock:(id)arg1;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; }*)_ISStoreIndex_hashTable;
- (struct { unsigned int x1; bool x2; unsigned int x3; unsigned int x4; unsigned int x5; }*)_ISStoreIndex_hashTableHeader;
- (BOOL)_ISStoreIndex_isValid;
- (struct { union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_1_1_1; unsigned long long x_1_1_2; } x1; unsigned char x2[16]; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; } x_3_1_1; unsigned long long x_3_1_2; } x3; bool x4; unsigned char x5[0]; }*)_ISStoreIndex_nodeForRef:(union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })arg1;
- (union { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; unsigned long long x2; })_ISStoreIndex_nodeRefForKey:(unsigned long long)arg1;
- (unsigned long long)_ISStoreIndex_nodesOffset;

// NSData (IconServicesAdditions)

+ (id)__is__bookmarkDataWithContentsOfURL:(id)arg1;
+ (id)__is__dataWithContentsOfURL:(id)arg1;

- (id)__is__bookmarkResourcePropertyForKey:(id)arg1;

// Image: /System/Library/PrivateFrameworks/KeychainCircle.framework/Versions/A/KeychainCircle

// NSData (KCJoiningMessages)

+ (id)dataWithEncodedSequenceData:(id)arg1 data:(id)arg2 error:(id*)arg3;
+ (id)dataWithEncodedSequenceString:(id)arg1 data:(id)arg2 error:(id*)arg3;
+ (id)dataWithEncodedString:(id)arg1 error:(id*)arg2;

- (bool)decodeSequenceData:(id*)arg1 data:(id*)arg2 error:(id*)arg3;
- (bool)decodeSequenceString:(id*)arg1 data:(id*)arg2 error:(id*)arg3;

// Image: /System/Library/PrivateFrameworks/SystemPolicy.framework/Versions/A/SystemPolicy

// NSData (Strings)

+ (id)dataFromHexString:(id)arg1;

- (id)hexString;

@end
